{"/home/travis/build/npmtest/node-npmtest-astrum/test.js":"/* istanbul instrument in package npmtest_astrum */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireExampleJsFromReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-astrum/lib.npmtest_astrum.js":"/* istanbul instrument in package npmtest_astrum */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_astrum = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_astrum = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-astrum/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-astrum && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_astrum */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_astrum\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_astrum.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        local.assetsDict['/assets.npmtest_astrum.rollup.js'] =\n            local.assetsDict['/assets.npmtest_astrum.rollup.js'] ||\n            local.fs.readFileSync(\n                // buildCustomOrg-hack\n                local.npmtest_astrum.__dirname +\n                    '/lib.npmtest_astrum.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-astrum/node_modules/astrum/manager/astrum.js":"#!/usr/bin/env node\nvar program = require('commander'),\n    fs = require('fs-extra'),\n    chalk = require('chalk'),\n    inquirer = require('inquirer'),\n    utils = require('./utils'),\n    pjson = require('../package.json');\n\nprogram\n    .version(pjson.version)\n    .usage('[command]')\n    .command('init', 'initialize new pattern library')\n    .command('update', 'update existing pattern library')\n    .command('new', 'create a new component')\n    .command('edit', 'edit a component and/or group')\n    .command('delete', 'delete component and/or group')\n    .command('list', 'list components')\n    .option('-I, --instance', 'output the instance version number')\n    .parse(process.argv);\n\nif (!process.argv.slice(2).length) {\n    program.outputHelp();\n}\n\n/**\n * Get instance version number.\n */\nif (program.instance) {\n    try {\n        if(utils.getConfig()) {\n            utils.init();\n            console.log(chalk.grey(\"This Astrum instance version is: \") + chalk.green(utils.$data.version));\n        }\n    } catch (e) {\n        console.log(chalk.red(\"Astrum has not been initialised.\"));\n    }\n}","/home/travis/build/npmtest/node-npmtest-astrum/node_modules/astrum/manager/utils.js":"var fs = require('fs-extra'),\n    chalk = require('chalk'),\n    inquirer = require('inquirer'),\n    dir = require('global-modules'),\n    mkdirp = require('mkdirp'),\n    isWindows = require('is-windows'),\n    pjson = require('../package.json');\n\nmodule.exports = {\n\n    module_path: dir + '/' + pjson.name,\n    $root: process.cwd(),\n    $config: null,\n    $data: null,\n    $pjson: pjson,\n\n    init: function() {\n        var _this = this;\n\n        // Get config.\n        try {\n            _this.$config = _this.getConfig();\n        } catch (e) {\n            throw(new Error(chalk.red(\"No astrum-config.json file found in project root.\")));\n        }\n\n        // Get data.\n        try {\n            _this.$data = _this.getData();\n        } catch (e) {\n            throw(new Error(chalk.red(\"No data.json file found in \" + _this.$config.path )));\n        }\n    },\n\n    setup: function(path, callback) {\n        var _this = this,\n            error = false;\n\n        fs.exists(path, function(r) {\n            if (r) {\n                throw(new Error(chalk.red('Pattern library has already been initialized.')));\n            }\n        });\n\n        _this.saveConfig(path, function() {\n            mkdirp(path, function (err) {\n                if (err) {\n                    console.error(chalk.red('Error: ' + err));\n                    error = true;\n                }\n\n                fs.copy(_this.pathify(_this.module_path + '/_template'), path, function (err) {\n                    if (err) {\n                        console.log(chalk.red('Error: ' + err));\n                        error = true;\n                    }\n\n                    _this.init();\n                    _this.updateVersion(pjson.version);\n\n                    return callback();\n                });\n            });\n\n            return ! error;\n        });\n    },\n\n    updateVersion: function(number) {\n        this.$data.version = number;\n\n        this.saveData(function(){});\n    },\n\n    update: function(callback) {\n        var _this = this;\n\n        fs.exists(_this.$config.path, function(r) {\n            if (!r) {\n                throw(new Error(chalk.red('No pattern library found to update.')));\n            }\n        });\n\n        fs.copy(_this.pathify(_this.module_path + '/_template/app'), _this.$config.path + '/app');\n        fs.copy(_this.pathify(_this.module_path + '/_template/index.html'), _this.$config.path + '/index.html');\n        fs.copy(_this.pathify(_this.module_path + '/_template/LICENSE.txt'), _this.$config.path + '/LICENSE.txt');\n        \n        _this.updateVersion(pjson.version);\n\n        /**\n         * Version 1.7.0 introduced customisable titles.\n         * If updating from pre-1.7.0 we need to add in the\n         * default titles.\n         */\n        if(!_this.$data.theme.hasOwnProperty(\"titles\")) {\n            _this.$data.theme.titles = {\n                \"library_title\": \"Pattern Library\",\n                \"pages_title\": \"Overview\",\n                \"components_title\": \"Components\"\n            }\n\n            _this.saveData(function() {});\n        }\n\n        return callback();\n    },\n\n    getConfig: function() {\n        var _this = this;\n        \n        return JSON.parse(fs.readFileSync(_this.pathify(_this.$root + '/astrum-config.json')));\n    },\n\n    getData: function() {\n        var _this = this;\n\n        return JSON.parse(fs.readFileSync(_this.pathify(_this.$config.path + '/data.json')));\n    },\n\n    outputList: function(components, groups) {\n\n        console.log();\n        console.log(chalk.grey('Legend:'));\n        console.log(chalk.grey('----------------------------------------------------------------'));\n        console.log('[i]: index');\n        console.log('%s: group', chalk.green('green'));\n        console.log('%s: component', chalk.yellow('yellow'));\n        console.log(chalk.grey('----------------------------------------------------------------'));\n        console.log();\n\n        if(groups.length) {\n            for (var i = 0; i < groups.length; i++) {\n                var g = groups[i];\n\n                console.log('[%s] %s:', i, chalk.green(g.name));\n\n                var k = 0;\n                for (var j = 0; j < groups[i].components.length; j++) {\n                    var c = groups[i].components[j];\n\n                    if (c.group === g.name) {\n                        console.log('     %s [%s] %s', String.fromCharCode(0x21B3), k, chalk.yellow(c.name));\n                        k++;\n                    }\n                }\n            }\n        } else {\n            console.log('Your pattern library is empty.');\n        }\n\n        console.log();\n    },\n\n    saveConfig: function(path, callback) {\n        var _this = this,\n            error = false;\n\n        fs.writeFile(_this.pathify(this.$root + '/astrum-config.json'), JSON.stringify({\n            path: path\n        }, null, 4), function (err) {\n            if (err) {\n                console.log(chalk.red('Error: ' + err));\n                error = true;\n            }\n\n            return callback();\n        });\n\n        return ! error;\n    },\n\n    saveData: function(callback) {\n        var _this = this,\n            error = false;\n\n        fs.writeFile(_this.pathify(_this.$config.path + '/data.json'), JSON.stringify(_this.$data, null, 4), function (err) {\n            if (err) {\n                console.log(chalk.red('Error: ' + err));\n                error = true;\n            }\n\n            return callback();\n        });\n\n        return ! error;\n    },\n\n    getGroupIndex: function(group) {\n        return this.$data.groups.findIndex(function(item) {\n            return item.name == group;\n        });\n    },\n\n    getComponentIndex: function(group_name) {\n        var _this = this,\n            parts = group_name.split(\"/\"),\n            groupIndex = _this.getGroupIndex(parts[0]);\n\n        if (groupIndex !== -1) {\n            for (var i = 0; i < _this.$data.groups[groupIndex].components.length; i++) {\n                var c = _this.$data.groups[groupIndex].components[i];\n\n                if (c.name == parts[1]) {\n                    return i;\n                }\n            }\n        }\n    },\n\n    createGroupFolder: function(group_path, callback) {\n        var _this = this;\n\n        callback = typeof callback !== 'undefined' ? callback : function(){};\n\n        fs.mkdir(group_path, function(err) {\n            if (err) {\n                console.log(chalk.red('Error: ' + err));\n                error = true;\n                return;\n            }\n\n            _this.createGroupDescription(group_path);\n\n            return callback();\n        });\n    },\n\n    createGroupDescription: function(group_path) {\n        var _this = this;\n\n        fs.exists(_this.pathify(group_path + '/description.md'), function(r) {\n\n            if(!r) {\n                fs.writeFile(_this.pathify(group_path + '/description.md'), '', function(err) {\n                    if (err) {\n                        console.log(chalk.red('Error: ' + err));\n                        error = true;\n                        return;\n                    }\n                });\n            }\n        });\n    },\n\n    deleteGroupFolder: function(group) {\n        var _this = this,\n            group_path = this.$config.path + '/components/' + group,\n            error = false;\n\n        fs.remove(_this.pathify(group_path), function(err) {\n            if (err) {\n                console.log(chalk.red('Error: ' + err));\n                error = true;\n            }\n        });\n\n        return ! error;\n    },\n\n    createComponentFolder: function(component_path, callback) {\n        callback = typeof callback !== 'undefined' ? callback : function(){};\n\n        var _this = this,\n            error = false;\n\n        fs.mkdir(_this.pathify(component_path), function(err) {\n            if (err) {\n                console.log(chalk.red('Error: ' + err));\n                error = true;\n                return;\n            }\n\n            fs.writeFile(_this.pathify(component_path + '/markup.html'), '', function(err) {\n                if (err) {\n                    console.log(chalk.red('Error: ' + err));\n                    error = true;\n                    return;\n                }\n\n                fs.writeFile(_this.pathify(component_path + '/description.md'), '', function(err) {\n                    if (err) {\n                        console.log(chalk.red('Error: ' + err));\n                        error = true;\n                        return;\n                    }\n\n                    return callback();\n                });\n            });\n        });\n\n        return ! error;\n    },\n\n    createComponentFiles: function(component) {\n        var _this = this,\n            group_path = this.$config.path + '/components/' + component.group,\n            component_path = group_path + '/' + component.name,\n            error = false;\n\n        fs.exists(_this.pathify(group_path), function(r) {\n            if(r) {\n                _this.createComponentFolder(component_path);\n            } else {\n                _this.createGroupFolder(group_path, function() {\n                    _this.createComponentFolder(component_path);\n                });\n            }\n        });\n\n        return ! error;\n    },\n\n    moveComponentFiles: function(original_component, edited_component) {\n        var _this = this,\n            o_path = this.$config.path + '/components/' + original_component.group + '/' + original_component.name,\n            d_group_path = this.$config.path + '/components/' + edited_component.group,\n            d_path = d_group_path + '/' + edited_component.name,\n            error = false;\n\n        if(o_path != d_path) {\n            fs.move(_this.pathify(o_path), _this.pathify(d_path), function(err) {\n                if (err) {\n                    console.error(chalk.red('Error: ' + err));\n                    error = true;\n                }\n\n                _this.createGroupDescription(d_group_path);\n            });\n        }\n\n        return ! error;\n    },\n\n    moveGroupFolder: function(original_group, edited_group) {\n        var _this = this,\n            oPath = this.$config.path + '/components/' + original_group.name,\n            dPath = this.$config.path + '/components/' + edited_group.name,\n            error = false;\n\n        if(oPath != dPath) {\n            fs.move(_this.pathify(oPath), _this.pathify(dPath), function(err) {\n                if (err) {\n                    console.error(chalk.red('Error: ' + err));\n                    error = true;\n                }\n            });\n        }\n\n        return ! error;\n    },\n\n    deleteComponentFiles: function(group_name) {\n        var _this = this,\n            component_path = this.$config.path + '/components/' + group_name,\n            error = false;\n\n        fs.remove(_this.pathify(component_path), function(err) {\n            if (err) {\n                console.log(chalk.red('Error: ' + err));\n                error = true;\n            }\n        });\n\n        return ! error;\n    },\n\n    validateComponent: function(group_name) {\n        var parts = group_name.split(\"/\");\n\n        // Check format\n        if (parts.length !== 2) {\n            console.log(chalk.red('Error: A new component name must comprise of a group, a single forward-slash, and a name e.g. buttons/default.'));\n            return false;\n        }\n\n        // Check for duplication\n        if (this.componentExists(group_name)) {\n            console.log(chalk.red('Error: A component with the name \"%s\" already exists in the \"%s\" group.'), parts[1], parts[0]);\n            return false;\n        }\n\n        return true;\n    },\n\n    componentExists: function(group_name) {\n        var _this = this,\n            parts = group_name.split(\"/\"),\n            groupIndex = _this.getGroupIndex(parts[0]);\n\n        if (groupIndex !== -1) {\n            for (var i = 0; i < _this.$data.groups[groupIndex].components.length; i++) {\n                var c = _this.$data.groups[groupIndex].components[i];\n\n                if (c.name == parts[1]) {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    },\n\n    groupExists: function(group_name) {\n        var parts = group_name.split(\"/\");\n\n        return this.getGroupIndex(parts[0]) == -1 ? false : true;\n    },\n\n    getGroupPositionChoices: function() {\n        var choices = [{\n                name: 'Position first',\n                value: 0\n            }],\n            n = 1;\n\n        for (var i = 0; i < this.$data.groups.length; i++) {\n            var g = this.$data.groups[i];\n\n            choices.push({\n                name: 'Position after ' + g.name,\n                value: n\n            });\n\n            n++;\n        }\n\n        return choices;\n    },\n\n    getGroupChoices: function(exclude_group) {\n        exclude_group = typeof exclude_group !== 'undefined' ? exclude_group : null;\n\n        var choices = [];\n\n        for (var i = 0; i < this.$data.groups.length; i++) {\n            var g = this.$data.groups[i];\n\n            if(exclude_group != g.name) {\n                choices.push({\n                    name: g.name,\n                    value: g.name\n                });\n            }\n        }\n\n        choices.push(new inquirer.Separator());\n\n        choices.push({\n            name: 'Create a new group...',\n            value: 'create_new_group'\n        });\n\n        return choices;\n    },\n\n    getComponentChangePositionChoices: function(component) {\n        var _this = this,\n            choices = [],\n            message,\n            currentPosition = null,\n            groupIndex = _this.getGroupIndex(component.group),\n            first = true,\n            passedCurrentPosition = false;\n\n        for (var i = 0; i < _this.$data.groups[groupIndex].components.length; i++) {\n            var c = _this.$data.groups[groupIndex].components[i];\n\n            if(first && c.name != component.name) {\n                choices.push({\n                    name: 'Position first',\n                    value: 0\n                });\n            }\n            first = false;\n\n            if(c.name == component.name) {\n                if(i != 0) choices.pop();\n                currentPosition = i;\n                passedCurrentPosition = true;\n            }\n\n            if(c.name != component.name) {\n                choices.push({\n                    name: 'Position after ' + chalk.yellow(c.name),\n                    value: passedCurrentPosition ? i : i + 1\n                });\n            }\n        }\n\n        choices.push(new inquirer.Separator());\n\n        message = currentPosition == 0 ? 'Keep current first position' : 'Keep current position after ' + chalk.yellow(_this.$data.groups[groupIndex].components[currentPosition - 1].name);\n\n        choices.push({\n            name: message,\n            value: currentPosition\n        });\n\n        return choices;\n    },\n\n    getGroupChangePositionChoices: function(group) {\n        var _this = this,\n            choices = [],\n            message,\n            currentPosition = null,\n            groupIndex = _this.getGroupIndex(group.name),\n            first = true,\n            passedCurrentPosition = false;\n\n        for (var i = 0; i < _this.$data.groups.length; i++) {\n            var g = _this.$data.groups[i];\n\n            if(first && g.name != group.name) {\n                choices.push({\n                    name: 'Position first',\n                    value: 0\n                });\n            }\n            first = false;\n\n            if(g.name == group.name) {\n                if(i != 0) choices.pop();\n                currentPosition = i;\n                passedCurrentPosition = true;\n            }\n\n            if(g.name != group.name) {\n                choices.push({\n                    name: 'Position after ' + chalk.yellow(g.name),\n                    value: passedCurrentPosition ? i : i + 1\n                });\n            }\n        }\n\n        choices.push(new inquirer.Separator());\n\n        message = currentPosition == 0 ? 'Keep current first position' : 'Keep current position after ' + chalk.yellow(_this.$data.groups[groupIndex - 1].name);\n\n        choices.push({\n            name: message,\n            value: currentPosition\n        });\n\n        return choices;\n    },\n\n    getComponentPositionChoices: function(group) {\n        var _this = this,\n            groupIndex = _this.getGroupIndex(group),\n            choices = [{\n                name: 'Position first',\n                value: 0\n            }];\n\n        for (var i = 0; i < _this.$data.groups[groupIndex].components.length; i++) {\n            var c = _this.$data.groups[groupIndex].components[i];\n            choices.push({\n                name: 'Position after ' + chalk.yellow(c.name),\n                value: i + 1\n            });\n        }\n\n        return choices;\n    },\n\n    getGroupComponentCount: function(group) {\n        return this.$data.groups[this.getGroupIndex(group)].components.length;\n    },\n\n    getGroupCount: function(group) {\n        return this.$data.groups.length;\n    },\n\n    getComponent: function(group_name) {\n        var _this = this,\n            parts = group_name.split('/');\n\n        for(var i = 0; i < _this.$data.groups.length; i++) {\n            for(var j = 0; j < _this.$data.groups[i].components.length; j++) {\n                var c = _this.$data.groups[i].components[j];\n\n                if(c.group == parts[0] && c.name == parts[1]) {\n                    return c;\n                }\n            }\n        }\n\n        return false;\n    },\n\n    validateSlug: function(string) {\n        var slug = string.match(/^[a-z0-9-]+$/);\n\n        return this.validateString(string) && slug && !! slug.length;\n    },\n\n    validateString: function(string) {\n        return string != '';\n    },\n\n    pathify: function(path) {\n        if(isWindows()) {\n            return path.replace(/(\\/)/g, \"\\\\\");\n        }\n\n        return path;\n    }\n};","/home/travis/build/npmtest/node-npmtest-astrum/node_modules/astrum/manager/astrum-delete.js":"#!/usr/bin/env node\nvar program = require('commander'),\n    fs = require('fs-extra'),\n    chalk = require('chalk'),\n    inquirer = require('inquirer'),\n    utils = require('./utils');\n\nutils.init();\n\nprogram\n    .description(chalk.yellow('Delete a pattern library component or group.'))\n    .option('-g, --group [group_name]', 'delete group');\n\n/**\n * Override argv[1] so that usage command is\n * formatted correctly.\n */\nprocess.argv[1] = 'astrum delete';\n\nprogram.parse(process.argv);\n\n/**\n * Automatically output help if no parameters are passed.\n */\nif (!process.argv.slice(2).length) {\n    program.outputHelp();\n}\n\n/**\n * Delete individual component.\n */\nvar group_name = program.args[0];\nif (group_name) {\n    var parts = group_name.split('/');\n\n    if (utils.componentExists(group_name) !== false) {\n        var componentIndex = utils.getComponentIndex(group_name),\n            groupIndex = utils.getGroupIndex(parts[0]);\n\n        inquirer.prompt([\n            {\n                type: 'confirm',\n                name: 'delete',\n                message: function () {\n                    console.log();\n                    console.log(chalk.grey('Delete \"' + parts[1] + '\" component:'));\n                    console.log(chalk.grey('----------------------------------------------------------------'));\n                    return chalk.red('Are you sure you want to delete this component?');\n                },\n                default: false\n            }\n        ]).then(function (answers) {\n            if (!answers.delete) {\n                console.log();\n                console.log(chalk.grey('----------------------------------------------------------------'));\n                console.log(chalk.green('\\u2713 Deletion cancelled.'));\n                console.log(chalk.grey('----------------------------------------------------------------'));\n                console.log();\n                return;\n            }\n\n            if (answers.delete) {\n                var componentCount = utils.getGroupComponentCount(parts[0]);\n\n                utils.$data.groups[groupIndex].components.splice(componentIndex, 1);\n                utils.deleteComponentFiles(group_name);\n\n                if (componentCount == 1) {\n                    inquirer.prompt([\n                        {\n                            type: 'confirm',\n                            name: 'delete_group',\n                            message: chalk.red('Deleting this component will leave it\\'s parent group empty. Delete the \"' + parts[0] + '\" group as well?'),\n                            default: true\n                        }\n                    ]).then(function (answers) {\n\n                        if (!answers.delete_group) {\n\n                            utils.saveData(function () {\n                                console.log();\n                                console.log(chalk.grey('----------------------------------------------------------------'));\n                                console.log(chalk.green('\\u2713 Component deleted successfully.'));\n                                console.log(chalk.grey('----------------------------------------------------------------'));\n                                console.log();\n                            });\n                        }\n\n                        if (answers.delete_group) {\n                            utils.$data.groups.splice(groupIndex, 1);\n                            utils.deleteGroupFolder(parts[0]);\n\n                            utils.saveData(function () {\n                                console.log();\n                                console.log(chalk.grey('----------------------------------------------------------------'));\n                                console.log(chalk.green('\\u2713 Group and component deleted successfully.'));\n                                console.log(chalk.grey('----------------------------------------------------------------'));\n                                console.log();\n                            });\n                        }\n                    });\n                } else {\n\n                    utils.saveData(function () {\n                        console.log();\n                        console.log(chalk.grey('----------------------------------------------------------------'));\n                        console.log(chalk.green('\\u2713 Component deleted successfully.'));\n                        console.log(chalk.grey('----------------------------------------------------------------'));\n                        console.log();\n                    });\n                }\n            }\n        });\n    } else {\n        console.log(chalk.red('Error: Component not found.'));\n    }\n}\n\n/**\n * Delete entire group.\n */\nif (program.group) {\n    var existingGroupIndex = utils.getGroupIndex(program.group);\n\n    if (existingGroupIndex !== -1) {\n        var group = utils.$data.groups[existingGroupIndex];\n\n        inquirer.prompt([\n            {\n                type: 'confirm',\n                name: 'delete',\n                message: function () {\n                    console.log();\n                    console.log(chalk.grey('Delete the \"' + group.name + '\" group and all it\\'s components:'));\n                    console.log(chalk.grey('----------------------------------------------------------------'));\n                    return chalk.red('Are you sure you want to delete this group?');\n                },\n                default: false\n            }\n        ]).then(function (answers) {\n            if (!answers.delete) {\n                console.log();\n                console.log(chalk.grey('----------------------------------------------------------------'));\n                console.log(chalk.green('\\u2713 Deletion cancelled.'));\n                console.log(chalk.grey('----------------------------------------------------------------'));\n                console.log();\n                return;\n            }\n\n            if (answers.delete) {\n                utils.$data.groups.splice(existingGroupIndex, 1);\n                utils.deleteGroupFolder(group.name);\n\n                utils.saveData(function () {\n                    console.log();\n                    console.log(chalk.grey('----------------------------------------------------------------'));\n                    console.log(chalk.green('\\u2713 Group and component deleted successfully.'));\n                    console.log(chalk.grey('----------------------------------------------------------------'));\n                    console.log();\n                });\n            }\n        });\n    } else {\n        console.log(chalk.red('Error: Group not found.'));\n    }\n}","/home/travis/build/npmtest/node-npmtest-astrum/node_modules/astrum/manager/astrum-edit.js":"#!/usr/bin/env node\nvar program = require('commander'),\n    fs = require('fs-extra'),\n    chalk = require('chalk'),\n    inquirer = require('inquirer'),\n    utils = require('./utils');\n\nutils.init();\n\nprogram\n    .usage('[group_name/component_name]')\n    .description(chalk.yellow('Edit an existing pattern library component or group.'))\n    .option('-g, --group [group_name]', 'edit group details');\n\n/**\n * Override argv[1] so that usage command is\n * formatted correctly.\n */\nprocess.argv[1] = 'astrum edit';\n\nprogram.parse(process.argv);\n\n/**\n * Automatically output help if no parameters are passed.\n */\nif (!process.argv.slice(2).length) {\n    program.outputHelp();\n}\n\nvar group_name = program.args[0];\nif (group_name) {\n    var parts = group_name.split('/'),\n        existingComponentIndex = utils.getComponentIndex(group_name),\n        existingGroupIndex = utils.getGroupIndex(parts[0]);\n\n    if (existingComponentIndex !== undefined) {\n        var component = utils.getComponent(group_name);\n\n        inquirer.prompt([\n            {\n                name: 'name',\n                message: function () {\n                    console.log();\n                    console.log(chalk.grey('Edit component details:'));\n                    console.log(chalk.grey('----------------------------------------------------------------'));\n                    return 'Component name:'\n                },\n                validate: function (str) {\n                    return utils.validateSlug(str);\n                },\n                default: component.name\n            },\n            {\n                name: 'title',\n                message: 'Component title:',\n                validate: function (str) {\n                    return utils.validateString(str);\n                },\n                default: component.title\n            },\n            {\n                when: function () {\n                    return !component.type || component.type !== 'colors';\n                },\n                type: 'list',\n                name: 'width',\n                message: function () {\n                    return 'Component width:'\n                },\n                choices: [\n                    {\n                        name: 'Full width',\n                        value: 'full'\n                    },\n                    {\n                        name: 'Half width',\n                        value: 'half'\n                    }\n                ],\n                default: component.width\n            },\n            {\n                when: function () {\n                    return !program.type || program.type !== 'colors';\n                },\n                type: 'confirm',\n                name: 'sample_dark_background',\n                message: function () {\n                    console.log();\n                    console.log(chalk.grey('Component options:'));\n                    console.log(chalk.grey('----------------------------------------------------------------'));\n                    return 'Apply a dark background to the code sample?'\n                },\n                default: function() {\n                    if(component.hasOwnProperty('options') &&\n                       component.options.hasOwnProperty('sample_dark_background')) {\n                        return component.options.sample_dark_background;\n                    }\n\n                    return false;\n                }\n            },\n            {\n                when: function () {\n                    return !program.type || program.type !== 'colors';\n                },\n                type: 'confirm',\n                name: 'disable_code_sample',\n                message: function () {\n                    return 'Disable code sample?'\n                },\n                default: function() {\n                    if(component.hasOwnProperty('options') &&\n                       component.options.hasOwnProperty('disable_code_sample')) {\n                        return component.options.disable_code_sample;\n                    }\n\n                    return false;\n                }\n            },\n            {\n                type: 'confirm',\n                name: 'change_group',\n                message: function () {\n                    console.log();\n                    console.log(chalk.grey('Manage component group association:'));\n                    console.log(chalk.grey('----------------------------------------------------------------'));\n                    return 'Change component group:';\n                },\n                default: false\n            },\n            {\n                when: function (response) {\n                    return response.change_group;\n                },\n                type: 'list',\n                name: 'new_group',\n                message: 'Select a new group:',\n                choices: utils.getGroupChoices(parts[0])\n            },\n            {\n                when: function (response) {\n                    return !response.change_group || response.new_group != 'create_new_group';\n                },\n                type: 'list',\n                name: 'component_position',\n                message: function (response) {\n                    if (!response.change_group) {\n                        return 'Change the position for the component in the \"' + component.group + '\" group:'\n                    } else {\n                        return 'Select a position for the component in the \"' + response.new_group + '\" group:'\n                    }\n                },\n                choices: function (response) {\n                    if (!response.change_group) {\n                        return utils.getComponentChangePositionChoices(component);\n                    } else {\n                        return utils.getComponentPositionChoices(response.new_group);\n                    }\n                },\n                default: function (response) {\n                    if (!response.change_group) {\n                        return utils.getGroupComponentCount(component.group) - 1;\n                    }\n\n                    return 0;\n                }\n            },\n            {\n                when: function (response) {\n                    return response.change_group && response.new_group == 'create_new_group';\n                },\n                name: 'group',\n                message: function () {\n                    console.log();\n                    console.log(chalk.grey('New group details:'));\n                    console.log(chalk.grey('----------------------------------------------------------------'));\n                    return 'Group name:';\n                },\n                validate: function (str) {\n                    return utils.validateSlug(str);\n                },\n                choices: utils.getGroupChoices(parts[0])\n            },\n            {\n                when: function (response) {\n                    return response.change_group && response.new_group == 'create_new_group';\n                },\n                name: 'group_title',\n                message: 'Group title:',\n                choices: utils.getGroupChoices()\n            },\n            {\n                when: function (response) {\n                    return response.change_group && response.new_group == 'create_new_group';\n                },\n                type: 'list',\n                name: 'group_position',\n                message: 'Select group position:',\n                choices: utils.getGroupPositionChoices()\n            },\n            {\n                when: function (response) {\n                    return response.change_group && utils.getGroupComponentCount(component.group) == 1;\n                },\n                type: 'confirm',\n                name: 'delete_group',\n                message: chalk.red('Moving this component will leave it\\'s current parent group empty. Delete the \"' + component.group + '\" group in the process?'),\n                default: true\n            }\n        ]).then(function (answers) {\n            var originalComponent = utils.$data.groups[existingGroupIndex].components[existingComponentIndex],\n                editedComponent = {},\n                editedGroupIndex,\n                error = false;\n\n            // Store edited component details\n            editedComponent.name = answers.name;\n            editedComponent.title = answers.title;\n            if (answers.width != 'full') editedComponent.width = answers.width;\n\n            // Retain original details\n            if(originalComponent.type) editedComponent.type = originalComponent.type;\n            if(originalComponent.colors) editedComponent.colors = originalComponent.colors;\n            if(originalComponent.options) editedComponent.options = originalComponent.options;\n\n            // Apply new options\n            if(!answers.sample_dark_background &&\n               editedComponent.hasOwnProperty('options') &&\n                editedComponent.options.hasOwnProperty('sample_dark_background')) {\n                delete editedComponent.options.sample_dark_background;\n            }\n\n            if (answers.sample_dark_background) {\n                if(!editedComponent.hasOwnProperty('options')) { editedComponent.options = {}; }\n                editedComponent.options.sample_dark_background = true;\n            }\n\n            if(!answers.disable_code_sample &&\n               editedComponent.hasOwnProperty('options') &&\n                editedComponent.options.hasOwnProperty('disable_code_sample')) {\n                delete editedComponent.options.disable_code_sample;\n            }\n\n            if (answers.disable_code_sample) {\n                if(!editedComponent.hasOwnProperty('options')) { editedComponent.options = {}; }\n                editedComponent.options.disable_code_sample = true;\n            }\n\n            //// If creating a new group\n            if (answers.new_group == 'create_new_group') {\n                var newGroup = {};\n\n                // Store new group details\n                newGroup.name = answers.group;\n                newGroup.title = answers.group_title;\n                newGroup.components = [];\n\n                // Add new group to data\n                utils.$data.groups.splice(answers.group_position, 0, newGroup);\n\n                // Set edited components group to new group name\n                editedComponent.group = answers.group;\n                editedGroupIndex = answers.group_position;\n\n                // Refresh existing groups index\n                existingGroupIndex = utils.getGroupIndex(originalComponent.group);\n            } else {\n                editedComponent.group = answers.new_group ? answers.new_group : originalComponent.group;\n                editedGroupIndex = utils.getGroupIndex(editedComponent.group);\n            }\n\n            // Check for duplicate data\n            if (originalComponent.name != editedComponent.name && utils.componentExists(editedComponent.group + '/' + editedComponent.name)) {\n                console.log(chalk.red('Error: A component with same name already exists in the group.'));\n                error = true;\n            }\n\n            if (!error) {\n                // Remove original component in data\n                utils.$data.groups[existingGroupIndex].components.splice(existingComponentIndex, 1);\n                utils.$data.groups[editedGroupIndex].components.splice(answers.component_position, 0, editedComponent);\n\n                // Move component files\n                if (utils.moveComponentFiles(originalComponent, editedComponent)) {\n\n                    if (answers.delete_group) {\n                        utils.$data.groups.splice(existingGroupIndex, 1);\n                        utils.deleteGroupFolder(originalComponent.group);\n\n                        console.log();\n                        console.log(chalk.grey('----------------------------------------------------------------'));\n                        console.log(chalk.green('\\u2713 Original group deleted successfully.'));\n                    }\n\n                    utils.saveData(function () {\n                        if (!answers.delete_group) {\n                            console.log();\n                            console.log(chalk.grey('----------------------------------------------------------------'));\n                        }\n                        console.log(chalk.green('\\u2713 Pattern library data saved successfully.'));\n                        console.log(chalk.grey('----------------------------------------------------------------'));\n                        console.log();\n                        console.log(chalk.yellow('Edit your component markup in ' + utils.$config.path + '/components/' + editedComponent.group + '/' + editedComponent.name + '/markup.html'));\n                        console.log(chalk.yellow('Edit your component description in ' + utils.$config.path + '/components/' + editedComponent.group + '/' + editedComponent.name + '/description.md (Markdown supported)'));\n                        console.log();\n                    });\n                }\n            }\n        });\n\n        // Return error\n    } else {\n        console.log(chalk.red('Error: Component not found.'))\n    }\n}\n\nif (program.group) {\n    var existingGroupIndex = utils.getGroupIndex(program.group);\n\n    if (existingGroupIndex !== false) {\n        var group = utils.$data.groups[existingGroupIndex];\n\n        inquirer.prompt([\n            {\n                name: 'name',\n                message: function () {\n                    console.log();\n                    console.log(chalk.grey('Edit group details:'));\n                    console.log(chalk.grey('----------------------------------------------------------------'));\n                    return 'Group name:'\n                },\n                validate: function (str) {\n                    return utils.validateSlug(str);\n                },\n                default: group.name\n            },\n            {\n                name: 'title',\n                message: function () {\n                    return 'Group title:'\n                },\n                validate: function (str) {\n                    return utils.validateString(str);\n                },\n                default: group.title\n            },\n            {\n                type: 'list',\n                name: 'group_position',\n                message: 'Change the position for the group:',\n                choices: utils.getGroupChangePositionChoices(group),\n                default: utils.getGroupCount(group) - 1\n            }\n        ]).then(function (answers) {\n            var originalGroup = utils.$data.groups[existingGroupIndex],\n                editedGroup = {},\n                error = false;\n\n            editedGroup.name = answers.name;\n            editedGroup.title = answers.title;\n            editedGroup.components = [];\n\n            for (var i = 0; i < originalGroup.components.length; i++) {\n                editedGroup.components[i] = originalGroup.components[i];\n                editedGroup.components[i].group = answers.name;\n            }\n\n            // Check for duplicate data\n            if (originalGroup.name != editedGroup.name && utils.groupExists(editedGroup.name)) {\n                console.log(chalk.red('Error: Group with same name already exists in.'));\n                error = true;\n            }\n\n            if (!error) {\n                // Remove original group in data\n                utils.$data.groups.splice(existingGroupIndex, 1);\n\n                // Add edited group to data\n                utils.$data.groups.splice(answers.group_position, 0, editedGroup);\n\n                // Move component files\n                if (utils.moveGroupFolder(originalGroup, editedGroup)) {\n\n                    utils.saveData(function () {\n                        console.log();\n                        console.log(chalk.grey('----------------------------------------------------------------'));\n                        console.log(chalk.green('\\u2713 Pattern library data saved successfully.'));\n                        console.log(chalk.grey('----------------------------------------------------------------'));\n                        console.log();\n\n                        if (originalGroup.name != editedGroup.name) {\n                            console.log(chalk.yellow('Group components have been moved to ' + utils.$config.path + '/components/' + editedGroup.name));\n                            console.log();\n                        }\n                    });\n                }\n            }\n        });\n    } else {\n        console.log(chalk.red('Error: Group not found.'));\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-astrum/node_modules/astrum/manager/astrum-init.js":"#!/usr/bin/env node\nvar Command = require('commander').Command,\n    program = require('commander'),\n    fs = require('fs-extra'),\n    chalk = require('chalk'),\n    inquirer = require('inquirer'),\n    utils = require('./utils');\n\nprogram\n    .usage('[path]')\n    .description(chalk.yellow('Initilize a new pattern library.'));\n\n/**\n * Override argv[1] so that usage command is\n * formatted correctly.\n */\nprocess.argv[1] = 'patterns init';\n\nprogram.parse(process.argv);\n\n\n/**\n * Automatically output help if no parameters are passed.\n */\nif (!process.argv.slice(2).length) {\n    program.outputHelp();\n}\n\n/**\n * Initialize pattern library.\n */\nvar path = program.args[0];\nif(path) {\n    utils.setup(path, function() {\n        console.log();\n        console.log(chalk.grey('----------------------------------------------------------------'));\n        console.log(chalk.green('\\u2713 Pattern library initialized successfully.'));\n        console.log(chalk.grey('----------------------------------------------------------------'));\n        console.log();\n        console.log(chalk.yellow('To get started add your first component using:'));\n        console.log();\n        console.log(chalk.yellow('$ astrum new [group_name/component_name]'));\n        console.log();\n        console.log(chalk.yellow('To customise your pattern library locate your data.json file'));\n        console.log(chalk.yellow('in ' + path + ' and add your project details.'));\n        console.log();\n    });\n}","/home/travis/build/npmtest/node-npmtest-astrum/node_modules/astrum/manager/astrum-list.js":"#!/usr/bin/env node\nvar program = require('commander'),\n    fs = require('fs-extra'),\n    chalk = require('chalk'),\n    inquirer = require('inquirer'),\n    utils = require('./utils');\n\nutils.init();\n\nprogram\n    .parse(process.argv);\n\nutils.outputList(utils.$data.components, utils.$data.groups);\n","/home/travis/build/npmtest/node-npmtest-astrum/node_modules/astrum/manager/astrum-new.js":"#!/usr/bin/env node\nvar Command = require('commander').Command,\n    program = require('commander'),\n    fs = require('fs-extra'),\n    chalk = require('chalk'),\n    inquirer = require('inquirer'),\n    utils = require('./utils');\n\nutils.init();\n\nprogram\n    .usage('[group_name/component_name]')\n    .description(chalk.yellow('Create a new pattern library component.'))\n    .option('-t, --type [name]', 'set component type: (standard|colors). Default standard.');\n\n/**\n * Override argv[1] so that usage command is\n * formatted correctly.\n */\nprocess.argv[1] = 'astrum new';\n\nprogram.parse(process.argv);\n\n\n/**\n * Automatically output help if no parameters are passed.\n */\nif (!process.argv.slice(2).length) {\n    program.outputHelp();\n}\n\n/**\n * Create new component\n */\nvar group_name = program.args[0];\nif (group_name) {\n\n    if (group_name !== true && utils.validateComponent(group_name)) {\n\n        // Build new component\n        var parts = group_name.split(\"/\"),\n            newComponent = {};\n\n        newComponent.group = parts[0];\n        newComponent.name = parts[1];\n\n        // Prompt for additional component details\n        inquirer.prompt([\n            {\n                name: 'title',\n                message: function () {\n                    console.log();\n                    console.log(chalk.grey('New component details:'));\n                    console.log(chalk.grey('----------------------------------------------------------------'));\n                    console.log(chalk.grey('Component group: ' + parts[0]));\n                    console.log(chalk.grey('Component name: ' + parts[1]));\n                    return 'Component title:'\n                },\n                validate: function (str) {\n                    return str !== '';\n                }\n            },\n            {\n                when: function () {\n                    return !program.type || program.type !== 'colors';\n                },\n                type: 'list',\n                name: 'width',\n                message: function () {\n                    return 'Component width:'\n                },\n                choices: [\n                    {\n                        name: 'Full width',\n                        value: 'full'\n                    },\n                    {\n                        name: 'Half width',\n                        value: 'half'\n                    }\n                ]\n            },\n            {\n                when: function () {\n                    return !program.type || program.type !== 'colors';\n                },\n                type: 'confirm',\n                name: 'sample_dark_background',\n                message: function () {\n                    console.log();\n                    console.log(chalk.grey('Component options:'));\n                    console.log(chalk.grey('----------------------------------------------------------------'));\n                    return 'Apply a dark background to the code sample?'\n                },\n                default: false\n            },\n            {\n                when: function () {\n                    return !program.type || program.type !== 'colors';\n                },\n                type: 'confirm',\n                name: 'disable_code_sample',\n                message: function () {\n                    return 'Disable code sample?'\n                },\n                default: false\n            }\n        ]).then(function (answers) {\n            var typeColor = program.type && program.type == 'colors';\n\n            newComponent.title = answers.title;\n            if (answers.width != 'full') newComponent.width = answers.width;\n\n            if (answers.sample_dark_background) {\n                if(!newComponent.hasOwnProperty('options')) { newComponent.options = {} };\n                newComponent.options.sample_dark_background = answers.sample_dark_background;\n            }\n\n            if (answers.disable_code_sample) {\n                if(!newComponent.hasOwnProperty('options')) { newComponent.options = {} };\n                newComponent.options.disable_code_sample = answers.disable_code_sample;\n            }\n\n            if (typeColor) {\n                newComponent.type = 'colors';\n                newComponent.colors = [];\n            }\n\n            // If new group prompt for new group details\n            if (!utils.groupExists(group_name)) {\n                var newGroup = {};\n\n                inquirer.prompt([\n                    {\n                        name: 'title',\n                        message: function () {\n                            console.log();\n                            console.log(chalk.grey('New group details:'));\n                            console.log(chalk.grey('----------------------------------------------------------------'));\n                            console.log(chalk.grey('Group name: ' + parts[0]));\n                            return 'Group title:';\n                        },\n                        validate: function (str) {\n                            return str !== '';\n                        }\n                    },\n                    {\n                        type: 'list',\n                        name: 'group_position',\n                        message: 'Select group position:',\n                        choices: utils.getGroupPositionChoices()\n                    }\n                ]).then(function (answers) {\n                    newGroup.name = parts[0];\n                    newGroup.title = answers.title;\n\n                    utils.$data.groups.splice(answers.group_position, 0, newGroup);\n                    utils.$data.groups[answers.group_position].components = [newComponent];\n\n                    if (utils.createComponentFiles(newComponent)) {\n                        utils.saveData(function () {\n                            console.log();\n                            console.log(chalk.grey('----------------------------------------------------------------'));\n                            console.log(chalk.green('\\u2713 Pattern library data saved successfully.'));\n                            console.log(chalk.grey('----------------------------------------------------------------'));\n\n                            if (typeColor) {\n                                console.log();\n                                console.log(chalk.yellow('Ignore ' + utils.$config.path + '/components/' + newComponent.group + '/' + newComponent.name + '/markup.html'));\n                                console.log(chalk.yellow('Add your component description to ' + utils.$config.path + '/components/' + newComponent.group + '/' + newComponent.name + '/description.md (Markdown supported)'));\n                                console.log();\n                                console.log(chalk.yellow('Locate this component in your data.json file and add your colors to the \"colors\"'));\n                                console.log(chalk.yellow('array that has been created for you. Colors must be hex values e.g.:'));\n                                console.log();\n                                console.log(chalk.yellow('\"colors\": ['));\n                                console.log(chalk.yellow('    \"#4c4c4c\",'));\n                                console.log(chalk.yellow('    \"#7d8284\",'));\n                                console.log(chalk.yellow('    \"#a6b1b5\",'));\n                                console.log(chalk.yellow('    \"#e6eaf2\",'));\n                                console.log(chalk.yellow('    \"#FFFFFF\"'));\n                                console.log(chalk.yellow(']'));\n                                console.log();\n                                console.log(chalk.yellow('You can also add complimentary colors by comma separating the values e.g.:'));\n                                console.log();\n                                console.log(chalk.yellow('\"colors\": ['));\n                                console.log(chalk.yellow('    \"#7da9f9,#507ed3\",'));\n                                console.log(chalk.yellow('    \"#f469a7,#c14c80\",'));\n                                console.log(chalk.yellow('    \"#60ceb8,#3fa18d\",'));\n                                console.log(chalk.yellow('    \"#f5d13f,#f5a63f\",'));\n                                console.log(chalk.yellow('    \"#e199e5,#c776cb\"'));\n                                console.log(chalk.yellow(']'));\n                                console.log();\n                            } else {\n                                console.log();\n                                console.log(chalk.yellow('Add your group description to ' + utils.$config.path + '/components/' + newComponent.group + '/description.md (Markdown supported)'));\n                                console.log(chalk.yellow('Add your component markup to ' + utils.$config.path + '/components/' + newComponent.group + '/' + newComponent.name + '/markup.html'));\n                                console.log(chalk.yellow('Add your component description to ' + utils.$config.path + '/components/' + newComponent.group + '/' + newComponent.name + '/description.md (Markdown supported)'));\n                                console.log();\n                            }\n                        });\n                    }\n                });\n\n                // Else prompt to position new component in group\n            } else {\n\n                inquirer.prompt([\n                    {\n                        type: 'list',\n                        name: 'component_position',\n                        message: 'Select component position in the \"' + newComponent.group + '\" group:',\n                        choices: utils.getComponentPositionChoices(newComponent.group),\n                        default: utils.getComponentPositionChoices(newComponent.group).length - 1\n                    }\n                ]).then(function (answers) {\n                    var groupIndex = utils.getGroupIndex(newComponent.group);\n\n                    utils.$data.groups[groupIndex].components.splice(answers.component_position, 0, newComponent);\n\n                    if (utils.createComponentFiles(newComponent)) {\n                        utils.saveData(function () {\n                            console.log();\n                            console.log(chalk.grey('----------------------------------------------------------------'));\n                            console.log(chalk.green('\\u2713 Pattern library data saved successfully.'));\n                            console.log(chalk.grey('----------------------------------------------------------------'));\n\n                            if (typeColor) {\n                                console.log();\n                                console.log(chalk.yellow('Ignore ' + utils.$config.path + '/components/' + newComponent.group + '/' + newComponent.name + '/markup.html'));\n                                console.log(chalk.yellow('Add your component description to ' + utils.$config.path + '/components/' + newComponent.group + '/' + newComponent.name + '/description.md (Markdown supported)'));\n                                console.log();\n                                console.log(chalk.yellow('Locate this component in your data.json file and add your colors to the \"colors\"'));\n                                console.log(chalk.yellow('array that has been created for you. Colors must be hex values e.g.:'));\n                                console.log();\n                                console.log(chalk.yellow('\"colors\": ['));\n                                console.log(chalk.yellow('    \"#4c4c4c\",'));\n                                console.log(chalk.yellow('    \"#7d8284\",'));\n                                console.log(chalk.yellow('    \"#a6b1b5\",'));\n                                console.log(chalk.yellow('    \"#e6eaf2\",'));\n                                console.log(chalk.yellow('    \"#FFFFFF\"'));\n                                console.log(chalk.yellow(']'));\n                                console.log();\n                                console.log(chalk.yellow('You can also add complimentary colors by comma separating the values e.g.:'));\n                                console.log();\n                                console.log(chalk.yellow('\"colors\": ['));\n                                console.log(chalk.yellow('    \"#7da9f9,#507ed3\",'));\n                                console.log(chalk.yellow('    \"#f469a7,#c14c80\",'));\n                                console.log(chalk.yellow('    \"#60ceb8,#3fa18d\",'));\n                                console.log(chalk.yellow('    \"#f5d13f,#f5a63f\",'));\n                                console.log(chalk.yellow('    \"#e199e5,#c776cb\"'));\n                                console.log(chalk.yellow(']'));\n                                console.log();\n                            } else {\n                                console.log();\n                                console.log(chalk.yellow('Add your component markup to ' + utils.$config.path + '/components/' + newComponent.group + '/' + newComponent.name + '/markup.html'));\n                                console.log(chalk.yellow('Add your component description to ' + utils.$config.path + '/components/' + newComponent.group + '/' + newComponent.name + '/description.md (Markdown supported)'));\n                                console.log();\n                            }\n                        });\n                    }\n                });\n            }\n        });\n\n        // Return error\n    } else if (group_name == true) {\n        console.log(chalk.red('Error: To create a new component supply a \"group/name\" parameter.'))\n    }\n}\n","/home/travis/build/npmtest/node-npmtest-astrum/node_modules/astrum/manager/astrum-update.js":"#!/usr/bin/env node\nvar Command = require('commander').Command,\n    program = require('commander'),\n    fs = require('fs-extra'),\n    chalk = require('chalk'),\n    inquirer = require('inquirer'),\n    utils = require('./utils');\n\nutils.init();\n\nprogram\n    .usage('[path]')\n    .description(chalk.yellow('Update an existing pattern library.'))\n    .option('-f, --force', 'Force update the Astrum instance. ');\n\n/**\n * Override argv[1] so that usage command is\n * formatted correctly.\n */\nprocess.argv[1] = 'astrum update';\n\nprogram.parse(process.argv);\n\n/**\n * Update pattern library.\n */\noldVersion = utils.$data.version;\nnewVersion = utils.$pjson.version;\n\n/**\n * Force restore instance.\n */\nif (program.force && newVersion == oldVersion) {\n    utils.update(function () {\n        console.log();\n        console.log(chalk.grey('----------------------------------------------------------------'));\n        console.log(chalk.green('\\u2713 Pattern library forcibly restored to ' + newVersion + '.'));\n        console.log(chalk.grey('----------------------------------------------------------------'));\n        console.log();\n    });\n\n/**\n * Update instance.\n */\n} else if(newVersion !== oldVersion) {\n    utils.update(function () {\n        console.log();\n        console.log(chalk.grey('----------------------------------------------------------------'));\n        console.log(chalk.green('\\u2713 Pattern library successfully updated from ' + oldVersion + ' to ' + newVersion + '.'));\n        console.log(chalk.grey('----------------------------------------------------------------'));\n        console.log();\n    });\n\n/**\n * Instance up-to-date.\n */\n} else {\n    console.log();\n    console.log(chalk.grey('----------------------------------------------------------------'));\n    console.log(chalk.yellow('Pattern library is up-to-date.'));\n    console.log(chalk.grey('----------------------------------------------------------------'));\n    console.log();\n}"}